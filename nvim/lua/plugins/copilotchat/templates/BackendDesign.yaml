BackendDesignDocument:
  type: header
  attribute: h1
  description: Translated backend design specification based on a Markdown format.

  Contents:
    type: field
    attribute: list
    label: Contents
    options:
      - "[ProgrammingLanguages](#programminglanguages)"
      - "[TechnologySelection](#technologyselection)"
      - "[Roles](#roles)"
      - "[FunctionList](#functionlist)"
      - "[FunctionStructure](#functionstructure)"
      - "[ErrorHandling](#errorhandling)"
      - "[Security](#security)"

  ProgrammingLanguages:
    type: header
    attribute: h2
    description: Specify which programming languages are used for each backend component.
    instruction: List the programming languages used for each backend component.
    example: |
      **REST API**: TypeScript
      **WebSocket**: TypeScript
      **Webhook**: Python

    RESTAPI:
      type: field
      attribute: text
      label: REST API
    WebSocket:
      type: field
      attribute: text
      label: WebSocket
    Webhook:
      type: field
      attribute: text
      label: Webhook
    Worker:
      type: field
      attribute: text
      label: Worker

  TechnologySelection:
    type: header
    attribute: h2
    description: Identify the frameworks and libraries selected for implementing each backend component.
    instruction: List the technologies (frameworks and libraries) used for each backend component.
    example: |
      **REST API**:  
      - Framework: [Nest.js](https://nestjs.com/)
      - Library: [Passport](https://www.passportjs.org/)

    RESTAPI:
      type: list
      label: REST API
      options:
        - Framework:
        - Libraries:

    WebSocket:
      type: list
      label: WebSocket
      options:
        - Framework:
        - Libraries:

    Webhook:
      type: list
      label: Webhook
      options:
        - Framework:
        - Libraries:

    Worker:
      type: list
      label: Worker
      options:
        - Framework:
        - Libraries:

  Roles:
    type: header
    attribute: h2
    description: Define different system user roles and summarize their associated responsibilities.
    instruction: Define the different user roles and their responsibilities.

    RoleTable:
      type: field
      attribute: table
      label: Roles
      columns: [Role, Description]
      rows:
        - Role: Owner
          Description: ""
        - Role: Admin
          Description: ""
        - Role: User
          Description: ""
        - Role: Guest
          Description: ""

  FunctionList:
    type: header
    attribute: h2
    description: Provide a list of required functions for each backend component.
    instruction: List all necessary functions for each backend component.

    RESTAPIFunctions:
      type: field
      attribute: table
      label: REST API
      columns: [Function Name, Description]
      rows:
        - Function Name: User Registration
          Description: Registers a new user

    WebSocketFunctions:
      type: field
      attribute: table
      label: WebSocket
      columns: [Function Name, Description]
      rows:
        - Function Name: ""
          Description: ""

    WebhookFunctions:
      type: field
      attribute: table
      label: Webhook
      columns: [Function Name, Description]
      rows:
        - Function Name: ""
          Description: ""

    WorkerFunctions:
      type: field
      attribute: table
      label: Worker
      columns: [Function Name, Description]
      rows:
        - Function Name: ""
          Description: ""

  FunctionStructure:
    type: header
    attribute: h2
    description: Detail the structure and behavior of each function, including endpoint definitions.
    instruction: Define the structure of each function listed above, including endpoints and behaviors.

    ContentsStructure:
      type: field
      attribute: list
      label: Contents
      options:
        - "[REST API](#rest-api-configuration)"
        - "[WebSocket](#websocket-configuration)"
        - "[Webhook](#webhook-configuration)"
        - "[Worker](#worker-configuration)"

    RESTAPIConfiguration:
      type: header
      attribute: h3
      label: REST API Configuration
      description: Define the configuration, request/response, and behavior of REST API functions.

      UserRegistration:
        type: field
        attribute: list
        label: User Registration
        options:
          - URL: /api/user
            Method: POST
            Auth: Not required
            Permissions: All
            RequestBody: '`{ "name": "string", "email": "string" }`'
            ResponseJson: '`{ "id": "string", "name": "string", "email": "string" }`'
            RegisterFlow:
              LocalAuth:
              OAuth:

    WebSocketConfiguration:
      type: header
      attribute: h3
      label: WebSocket Configuration
      description: Define the configuration and behavior of WebSocket-based functions.

    WebhookConfiguration:
      type: header
      attribute: h3
      label: Webhook Configuration
      description: Define the configuration and behavior of Webhook-based functions.

    WorkerConfiguration:
      type: header
      attribute: h3
      label: Worker Configuration
      description: Define the configuration and responsibilities of background worker functions.

  ErrorHandling:
    type: header
    attribute: h2
    description: Outline the error-handling strategies applied to each backend component.
    instruction: Describe how errors are handled for each backend component.

    ContentsError:
      type: field
      attribute: list
      label: Contents
      options:
        - "[REST API Error Handling](#rest-api-error-handling)"
        - "[WebSocket Error Handling](#websocket-error-handling)"
        - "[Webhook Error Handling](#webhook-error-handling)"
        - "[Worker Error Handling](#worker-error-handling)"

    RESTAPIErrorHandling:
      type: header
      attribute: h3
      label: REST API Error Handling
      description: Describe how errors in the REST API are detected, logged, and responded to.

    WebSocketErrorHandling:
      type: header
      attribute: h3
      label: WebSocket Error Handling
      description: Describe how errors in WebSocket communication are detected and managed.

    WebhookErrorHandling:
      type: header
      attribute: h3
      label: Webhook Error Handling
      description: Describe how errors in webhook requests and responses are handled.

    WorkerErrorHandling:
      type: header
      attribute: h3
      label: Worker Error Handling
      description: Describe how background worker-related errors are handled and logged.

  Security:
    type: header
    attribute: h2
    description: Define the security measures and policies applied to backend components.
    instruction: Specify the security measures applied to each backend component.

    ContentsSecurity:
      type: field
      attribute: list
      label: Contents
      options:
        - "[REST API Security](#rest-api-security)"
        - "[WebSocket Security](#websocket-security)"
        - "[Webhook Security](#webhook-security)"
        - "[Worker Security](#worker-security)"

    RESTAPISecurity:
      type: header
      attribute: h3
      label: REST API Security
      description: Describe the security policies and practices used to protect the REST API.

      InputValidation:
        type: field
        attribute: list
        label: Input Validation
        options:
          - Validate all request parameter values
          - Reject unexpected fields

      ResponseControl:
        type: field
        attribute: list
        label: Response Control
        options:
          - Return only necessary information
          - Avoid exposing technical error details

      TrafficManagement:
        type: field
        attribute: list
        label: Traffic Management
        options:
          - Apply rate limiting per IP address
          - Apply rate limiting per user

      CORS:
        type: field
        attribute: list
        label: CORS (Cross-Origin Resource Sharing)
        options:
          - Allow only necessary origins
          - Strictly validate Origin headers and Access-Control-Allow-Origin

      SensitiveDataHandling:
        type: field
        attribute: list
        label: Sensitive Data Handling
        options:
          - Avoid placing sensitive data in URLs
          - Mask or omit sensitive fields in responses

      APISecurityHeaders:
        type: field
        attribute: list
        label: API Security Headers
        options:
          - Set Content-Security-Policy
          - Set X-Content-Type-Options: nosniff
          - Set Strict-Transport-Security
          - Set X-Frame-Options
          - Set Cache-Control

      Monitoring:
        type: field
        attribute: list
        label: Monitoring
        options:
          - Track API usage patterns

      Logging:
        type: field
        attribute: list
        label: Logging
        options:
          - Log abnormal activities
          - Log failed requests

    WebSocketSecurity:
      type: header
      attribute: h3
      label: WebSocket Security
      description: Describe the security measures used to protect WebSocket communications.

    WebhookSecurity:
      type: header
      attribute: h3
      label: Webhook Security
      description: Describe the security considerations and protections for incoming and outgoing webhooks.

    WorkerSecurity:
      type: header
      attribute: h3
      label: Worker Security
      description: Describe the security measures used to protect background processing workers.

DatabaseDesignDocument:
  type: header
  attribute: h1
  description: A structured document for database design, detailing tables/schemas and their relationships.

  Contents:
    type: field
    attribute: list
    label: Contents
    options:
      - "[Overview](#overview)"
      - "[Table/Schema List](#tableschema-list)"
      - "[Table/Schema Details](#tableschema-details)"
      - "[Entity Relationship Diagram](#entity-relationship-diagram)"

  Overview:
    type: header
    attribute: h2
    description: Overview of the database design and technology stack.
    instruction: Specify the programming language and database technology used.
    example: |
      **Programming Language**: TypeScript  
      **Database**: MongoDB × Mongoose

    ProgrammingLanguage:
      type: field
      attribute: text
      label: Programming Language
      description: The main backend programming language used to access the database.
      instruction: Specify the language used in your backend (e.g., TypeScript, Python).
      example: TypeScript

    Database:
      type: field
      attribute: text
      label: Database
      description: The database system and its interface or ORM library.
      instruction: Specify the database and any ORM or ODM used (e.g., MongoDB × Mongoose).
      example: MongoDB × Mongoose

  TableSchemaList:
    type: header
    attribute: h2
    label: Table/Schema List
    description: List of all tables or schemas used in the project.
    instruction: Provide a brief description of each table or schema.

    Tables:
      type: field
      attribute: table
      label: Tables/Schemas
      instruction: Add each table name along with a one-line description of its purpose.
      columns: [Table/Schema Name, Description]
      rows:
        - Table/Schema Name: User
          Description: Stores basic user information
        - Table/Schema Name: Log
          Description: Stores system-wide logs

  TableSchemaDetails:
    type: header
    attribute: h2
    label: Table/Schema Details
    description: Detailed structure of each table or schema.
    instruction: Fill in the fields and metadata for each table or schema.

    UserSchema:
      type: field
      attribute: table
      label: User
      columns: [Name, Unique?, Required?, Type, Description]
      rows:
        - Name: id
          Unique?: Yes
          Required?: Yes
          Type: string
          Description: Unique identifier for each user
        - Name: username
          Unique?: No
          Required?: Yes
          Type: string
          Description: Display name of the user
        - Name: email
          Unique?: Yes
          Required?: Yes
          Type: string
          Description: User's email address
        - Name: password
          Unique?: No
          Required?: No
          Type: string
          Description: Password used for login

    LogSchema:
      type: field
      attribute: table
      label: Log
      columns: [Name, Unique?, Required?, Type, Description]
      rows:
        - Name: id
          Unique?: Yes
          Required?: Yes
          Type: string
          Description: Unique identifier for each log entry
        - Name: timestamp
          Unique?: No
          Required?: Yes
          Type: date
          Description: Timestamp when the log entry was created
        - Name: level
          Unique?: No
          Required?: Yes
          Type: string
          Description: Log level (e.g., info, warning, error)
        - Name: message
          Unique?: No
          Required?: Yes
          Type: string
          Description: Message content of the log entry

  EntityRelationshipDiagram:
    type: header
    attribute: h2
    label: Entity Relationship Diagram
    description: Visual representation of the relationships between tables/schemas.
    instruction: Describe the ER diagram using Mermaid syntax.

    ERDiagram:
      type: field
      attribute: codeblock
      label: ERD
      language: mermaid
      value: |
        erDiagram
          USER {
            string id PK
            string username
            string email
            string password
          }

          LOG {
            string id PK
            date timestamp
            string level
            string message
          }

          USER ||--o{ LOG : "generates"
